#!/usr/bin/perl -w

# make_cvmfs
#
# This script simply traverses a directory structure and
# creates a file named .cvmfsdir that lists all the files
# in the directory structure recursively.  
# The Parrot cvmfs module uses this information in order to 
# make a web server look like a filesystem.
# 
# Example use:
#    make_cvmfs /home/fred/www
#    parrot tcsh
#    cd /cvmfs/my.web.server/~fred
#    ls -la


$verbose_mode = 0;
$verbose_changes = 1;
$follow_mode = 0;
$checksum_mode = 1;
$zip_mode = 0;
$minsize = 0;

$total_dirs = 0;
$total_files = 0;
$total_links = 0;
$total_checksums = 0;

#$name = 0;
$GROW_EPOCH = 1199163600;

sub load_cache
{
    my $dirpath = shift;
    my $type;
    my $name;
    my $mode;
    my $size;
    my $mtime;
    my $checksum;
    
    while(<DIRFILE>) {
        my @line = split;
        $type=shift @line;
        $checksum=pop @line;
        $mtime=pop @line;
        $size=pop @line;
        $mode=pop @line;
        $name=join(' ',@line);
        if($type eq "D") {
            load_cache("$dirpath/$name");
        } elsif($type eq "E") {
            return;
        } else {
            $checksum_cache{"$dirpath/$name"} = "$checksum";
        }
        return if(!defined DIRFILE);
    }
}

sub reorder_stat
{
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = @_;
    return ($mode,$size,$mtime-$GROW_EPOCH);
}

sub listdir
{
    my $dirname = shift;
    my $dir;
    my $d;
    my $subdirname;
    
    opendir $dir, $dirname or die "make_cvmfs: couldn't open $dirname\n";
    
    ##Â LF 17-07-2008
    ## if we are not in the top directory and 
    ## we find a cvmfs file then we skip this directory
    if( $topdir ne $dirname) {
        while( $d = readdir($dir) ) {
            if( $d =~ ".growfs.*") {
                print "make_cvmfs: $dirname has a catalog, skipping it.\n";
                closedir $dir;
                return(1);
            }
        }
        closedir $dir;
    }
    
    opendir $dir, $dirname or die "make_cvmfs: couldn't open $dirname\n";
    while( $d = readdir($dir) ) {
        
        if( $d =~ ".growfs.*") {
            next;
        }
        
        if( $d =~ "\.zgfs\$") {
            next;
        }
        
        if( $d =~ "\.statgfs\$") {
            next;
        }
        
        if( $d eq "." || $d eq ".." ) {
            next;
        }
        
        $subdirname = "$dirname/$d";
        
        print "$subdirname\n" if($verbose_mode);
        
        @info = reorder_stat lstat $subdirname;
        
        if( -l $subdirname ) {
            $linkname = readlink "$subdirname";
            if(substr($linkname,0,1) eq "/") {
                $toplength = length $topdir;
                if(substr($linkname,0,$toplength) eq $topdir) {
                    $linkname = substr($linkname,$toplength);
                    if(substr($linkname,0,1) ne "/") {
                        $linkname = "/" . $linkname;
                    }
                }
            }
            print DIRFILE "L $d\t@info 0 $linkname\n";
            $total_links++;
        } elsif( -d $subdirname ) {
            print DIRFILE "D $d\t@info 0\n";
            $total_dirs++;
        } else {
            if($checksum_mode) {
                $checksum = defined($checksum_cache{"$subdirname"}) ? 
                $checksum_cache{"$subdirname"} : 0;
            } else {
                $checksum = 0;
            }
            my $file_type = "F";
            if ( -f $subdirname . ".statgfs" ) {
               $file_type = "S";
            }
            print DIRFILE "$file_type $d\t@info $checksum\n";
            $total_files++;
            # LF 07-07-08
            # We want to create a zipped copy of
            # the file bigger than minsize
            if ($zip_mode && ($info[1] > $minsize)){
                print "$subdirname size: $info[1] > $minsize \n" if($verbose_mode);
                system "gzip -c $subdirname > $subdirname.zgfs";
            }    
        }
		
        if( -d $subdirname ) {
            if( -l $subdirname && !$follow_mode) {
                next;
            }
            
            if(listdir($subdirname)) {
                # LF 11-08-2008
                # this means this subdirectory has an
                # optional catalog
                print DIRFILE "E S\n";
            }
            else {
                print DIRFILE "E\n";
            }
        }
        
    }
    closedir $dir;
    return(0);
}

sub show_help
{
    print "Use: $0 [options] <directory>
    Where options are:
    -f       Follow symbolic links.
    -v       Give verbose messages.
    -K       Create checksums for files. (default enabled)
    -k       Disable checksums for files.
    -z SIZE  Zip files bigger than SIZE in bytes (as an additional file).
    -h       Show this help file.
    ";
}

while( defined $ARGV[0] ) {
    $arg = $ARGV[0];
    if( $arg eq "-f" ) {
        $follow_mode = 1;
    } elsif( $arg eq "-v" ) {
        $verbose_mode = 1;
    } elsif( $arg eq "-c" ) {
        $verbose_changes = 1;
    } elsif( $arg eq "-k" ) {
        $checksum_mode = 0;
    } elsif( $arg eq "-K" ) {
        $checksum_mode = 1;
    } elsif( $arg eq "-z" ) {
        shift @ARGV;
        $zip_mode = 1;
        $minsize = $ARGV[0];
    } elsif( $arg eq "-h" ) {
        show_help();
        exit(0);
    } elsif( $arg =~ "^-.*" ) {
        print "make_cvmfs: unknown argument: $arg (-h for help)\n";
        exit(0);
    } else {
        $topdir = $arg;
    }
    shift @ARGV;
}

if(!defined $topdir) {
    print "make_cvmfs: please give me a directory name (-h for help)\n";
    exit(0);
}

$dirfile = "$topdir/.growfsdir";

print "make_cvmfs: loading existing directory from $dirfile\n";

if(open DIRFILE, "$topdir/.growfsdir") {
    <DIRFILE>;
    load_cache($topdir);
    close(DIRFILE);
} else {
    print "make_cvmfs: no directory exists, this might be quite slow...\n";
}

if ($checksum_mode) {
    print "make_cvmfs: looking for files in $topdir directory...\n";
    
    my @blist;
    open (DIR,  "find $topdir -type f -name .growfsdir |");
    while (<DIR> ){
        chomp;
        my $parrent = `dirname $_`;
        chomp $parrent;
        if ($parrent ne $topdir) {
            push @blist, $parrent;    
            print "make_cvmfs: found existing .growfsdir in $parrent directory...\n";
        }
    }
    close(DIR);
    
    open (DIR,  "find $topdir -type f |");
    while (<DIR> ){
        chomp;
        ( $_ =~ ".growfs.*") && next;
        ( $_ =~ "\.zgfs\$" ) && next;
        ( $_ =~ "\.statgfs\$" ) && next;
        my $f = $_;
        my $skip = 0;
        for my $str (@blist) {
            if (!index($f,$str)) {
                $skip = 1;
            }
        }
        ($skip) && next;
        if (!defined($checksum_cache{"$_"}) or ((defined($checksum_cache{"$_"}) and $checksum_cache{"$_"} eq "0"))) {
            push @filelist, "$_";
        } 
    }
    close (DIR);
    $size1 = @filelist;
    print "make_cvmfs: found $size1 files without checksums...\n";
    print "make_cvmfs: looking for new or modified files...\n";
    if ( -f "$topdir/.growfsdir" ) {
        open (DIR,  "find $topdir -type f -cnewer $topdir/.growfsdir |");
        while (<DIR> ){
            chomp;
            ( $_ =~ ".growfs.*") && next;
            ( $_ =~ "\.zgfs\$" ) && next;
            ( $_ =~ "\.statgfs\$" ) && next;
            my $f = $_;
            my $skip = 0;
            for my $str (@blist) {
                if (!index($f,$str)) {
                    $skip = 1;
                }
            }
            ($skip) && next;
            push @filelist, "$_";
        }
        close (DIR);
    }
    $size2 = @filelist - $size1;
    print "make_cvmfs: found $size2 new or modified files...\n";
    my @unique_files;
    my %hash = ();
    foreach (@filelist) {$hash{$_}++};
    foreach (sort keys %hash) {push @unique_files, $_};
    $size3 = @unique_files;
    print "make_cvmfs: found $size3 unique new files...\n";
    print "make_cvmfs: processing files...";
    while (@unique_files) {
        my @tlist;
        for (1..1000) {
            my $file = pop @unique_files or last;
            if ( $file =~ '.*\ .*' or  $file =~ '.*\$.*' ) {
                my $checksum = substr(`sha1sum \'$file\'`,0,40);
                $checksum_cache{"$file"} = "$checksum";
                $total_checksums++;
            } else {
                push @tlist, "$file";
            }
        }
        print ".";
        $size4 = @tlist;
        if (@tlist) {
            open (SHA, "sha1sum @tlist|"); 
            while (<SHA> ){
                chomp;	
                $checksum = substr($_,0,40);
                my $file = substr($_,42);
                $checksum_cache{"$file"} = "$checksum";
            }
            close(SHA);
        }
        $total_checksums +=  $size4; 
    }
    print "Done.\n";
}

print "make_cvmfs: scanning directory tree for changes...\n";

open DIRFILE, ">$topdir/.growfsdirtmp" or die "make_cvmfs: cannot write to directory file $topdir/.growfsdirtmp\n";
@info = reorder_stat stat $topdir;
print DIRFILE "D root\t@info 0\n";

listdir "$topdir";

print DIRFILE "E\n";
close DIRFILE;

rename "$topdir/.growfsdirtmp", "$topdir/.growfsdir";
system "sha1sum < $topdir/.growfsdir > $topdir/.growfschecksum";

printf "make_cvmfs: $total_files files, $total_links links, $total_dirs dirs, $total_checksums checksums computed\n";

if($zip_mode) {
    printf "gzipped all the files bigger than $minsize\n";
}

printf "make_cvmfs: now try to zip the catalog\n";
system "gzip -c $topdir/.growfsdir >  $topdir/.growfsdir.zgfs";
exit 0;
