#!/bin/sh

show_help() 
{
	echo "Use: condor_submit_workers [options] <servername> <port> <num-workers>"
	echo "where options are:"
	echo "  -a                  Enable auto mode."
	echo "  -M <name>           Name of the preferred master for worker."
	echo "  -N <name>           Same as -M (backwards compatibility)."
	echo "  -C <catalog>        Set catalog server to <catalog>. <catalog> format: HOSTNAME:PORT."
	echo "  -t <time>           Abort after this amount of idle time. (default=900s)."
	echo "  -d <subsystem>      Enable debugging on worker for this subsystem (try -d all to start)."
	echo "  -w <size>           Set TCP window size."
	echo "  -i <time>           Set initial value for backoff interval when worker fails to connect to a master. (default=1s)"
	echo "  -b <time>           Set maxmimum value for backoff interval when worker fails to connect to a master. (default=60s)"
	echo "  -z <size>           Set available disk space threshold (in MB). When exceeded worker will clean up and reconnect. (default=100MB)"
	echo "  -A <arch>           Set architecture string for the worker to report to master instead of the value in uname."
	echo "  -O <os>             Set operating system string for the worker to report to master instead of the value in uname."
	echo "  -s <path>           Set the location for creating the working directory of the worker."
	echo "  -r <requirements>   Condor requirements ClassAd."
	echo "  -h                  Show this help message."
	exit 1
}

# This dummy requirement inhibits Condor from adding its own Memory expression,
# which causes long-running workers to eventually sit idle in the queue.
# The user can still add their own expression via the -r option.

requirements="(Memory>0)"

arguments=""
use_auto=0

while getopts aM:N:C:t:d:w:i:b:z:A:O:s:r:h opt 
do
	case "$opt" in
		a)  arguments="$arguments -a"; use_auto=1;;
		M)  arguments="$arguments -M $OPTARG"; use_auto=1;;
		N)  arguments="$arguments -M $OPTARG"; use_auto=1;;
		C)  arguments="$arguments -C $OPTARG";;
		t)  arguments="$arguments -t $OPTARG";;
		d)  arguments="$arguments -d $OPTARG";;
		w)  arguments="$arguments -w $OPTARG";;
		i)  arguments="$arguments -i $OPTARG";;
		b)  arguments="$arguments -b $OPTARG";;
		z)  arguments="$arguments -z $OPTARG";;
		A)  arguments="$arguments -A $OPTARG";;
		O)  arguments="$arguments -O $OPTARG";;
		s)  arguments="$arguments -s $OPTARG";;
		r)  requirements="$requirments $OPTARG";;
		h)  show_help;;
		\?) show_help;;
	esac
done

shift $(expr $OPTIND - 1)

if [ $use_auto = 0 ]; then
    if [ X$3 = X ]
    then
	show_help	
    fi
    host=$1
    port=$2
    count=$3
else
    if [ X$1 = X ]
    then
	show_help	
    fi
    host=
    port=
    count=$1
fi

worker=`which work_queue_worker 2>/dev/null`
if [ $? != 0 ]
then
	echo "$0: please add 'work_queue_worker' to your PATH."
	exit 1
fi

[ -d /tmp/$USER-workers ] || mkdir /tmp/${USER}-workers
cd /tmp/${USER}-workers
cp $worker .

condor_submit << EOF
universe = vanilla
executable = work_queue_worker
arguments = $arguments $host $port
transfer_input_files = work_queue_worker
should_transfer_files = yes
when_to_transfer_output = on_exit
output = worker.\$(PROCESS).output
error = worker.\$(PROCESS).error
log = workers.log
getenv = true
requirements = $requirements
queue $count
EOF

exit $?
